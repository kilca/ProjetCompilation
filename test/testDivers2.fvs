
class Point(var x: Integer, var y: Integer, var name: String) is {
  var hasClone : Integer := 0;   /* attributs supplementaires */
  /* la valeur du champ ci-dessous est indefinie si hasClone vaut 0.
   * Le probleme est qu'on n'a pas l'equivalent de NULL (du bon type)
   * dans le langage. On ne peut pas utiliser un 'object' pour cela car
   * un objet n'a pas de type defini.
  */
  var clone : Point; /* valeur indefinie */
  var index : Integer;

  /* L'en-tete du constructeur doit etre identique a celui de la classe.
   * Les parametres précédés de var correspondent implictement à des attributs
   * de meme nom qui seront intialises automatiquement à la valeur du
   * parametre, comme si on avait la ligne suivante en tete du constructeur:
   *  this.x := x; this.y := y; this.name := name;
   */

  def Point(var x: Integer, var y: Integer, var name: String) is
     { this.index := 1; }

  def getx() : Integer := this.x      /* pas de this implicite */

  def gety() : Integer := this.y

  def setName(s: String) is { this.name := s; }

  def isCloned() : Integer := this.hasClone <> 0

  def move(dx: Integer, dy: Integer, verbose: Integer) : Point is {
      this.x := this.x + dx; this.y := this.y + dy;
      if verbose then { this.print(verbose); } else {}
      /* pseudo variable 'result' dans laquelle, par convention, on laisse
       * la valeur de retour d'une fonction qui a un type de retour.
       * On aurait pu ecrire aussi
       * return this;
       */
      result := this;
  }

  def print(verbose : Integer) is {
      if verbose then "Inside Point::print".println(); else { }
      /* Exemples avec l'operateur & de concatenation de chaines */
      this.name.print();
      ( "= (" & this.x.toString() & ", " & this.y.toString() & ")" ).println();
  }
}
{
  p : Point := new Point(1,2,"COUCOU");
  is
  p.print(2);
}
