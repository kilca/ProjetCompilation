object CptPoint is {          /* Compteur d'instances de Point */
  var next : Integer := 0;   /* indice de la prochaine instance de Point */
  def incr() : Integer is { this.next := this.next + 1; result := this.next; }
  def howMany() : Integer := this.next
}

class Point(var x: Integer, var y: Integer, var name: String) is {
  var hasClone : Integer := 0;   /* attributs supplementaires */
  /* la valeur du champ ci-dessous est indefinie si hasClone vaut 0.
   * Le probleme est qu'on n'a pas l'equivalent de NULL (du bon type)
   * dans le langage. On ne peut pas utiliser un 'object' pour cela car
   * un objet n'a pas de type defini.
  */
  var clone : Point; /* valeur indefinie */
  var index : Integer;

  /* L'en-tete du constructeur doit etre identique a celui de la classe.
   * Les parametres précédés de var correspondent implictement à des attributs
   * de meme nom qui seront intialises automatiquement à la valeur du
   * parametre, comme si on avait la ligne suivante en tete du constructeur:
   *  this.x := x; this.y := y; this.name := name;
   */

  def Point(var x: Integer, var y: Integer, var name: String) is
     { this.index := CptPoint.incr(); }

  def getx() : Integer := this.x      /* pas de this implicite */

  def gety() : Integer := this.y

  def setName(s: String) is { this.name := s; }

  def isCloned() : Integer := this.hasClone <> 0

  def move(dx: Integer, dy: Integer, verbose: Integer) : Point is {
      this.x := this.x + dx; this.y := this.y + dy;
      if verbose then { this.print(verbose); } else {}
      /* pseudo variable 'result' dans laquelle, par convention, on laisse
       * la valeur de retour d'une fonction qui a un type de retour.
       * On aurait pu ecrire aussi
       * return this;
       */
      result := this;
  }

  def print(verbose : Integer) is {
      /* Exemples avec l'operateur & de concatenation de chaines */
      this.name.print();
  }

  /* par defaut, on ajoute un ' au nom de l'objet. Modifiable avec setName */
  def clone() : Point is
  { this.hasClone = 1;
   /* On memorise le dernier clone construit à partir de cet objet
    * si on voulait on pourrait le chainer a la fin de la liste des clones
    */
    result := this.clone;
  }

  /* imprime le clone de cet objet, s'il existe, ainsi que recursivement
   * les clones de ce dernier
   */
  def allClones () is {
    if this.hasClone <> 0 then { this.clone.print(1); this.clone.allClones(); }
    else { }
  }

  def egal(p: Point) : Integer is {
   /* ils sont egaux s'ils ont memes coordonnees */
       b1 : Integer := p.x - this.x;
       b2 : Integer := p.y - this.y;
       is
       if b1 then return 0; else return b2 = 0;
  }

  def egal2(p: Point) : Integer is {  /* autre version */
    b1: Integer := p.x - this.x;
    b2: Integer := p.y - this.y;
    is
    result := 0;
    if b1 then { } else { result := b2 = 0; }
  }
} /* Fin de la classe Point */

class Couleur(var coul: Integer) is {
   /* 3 couleurs : couleur = 0, 1 ou 2
    * Le corps du constructeur garantit qu'on a bien que trois couleurs.
    */

   def Couleur (var coul: Integer) is {
      if this.coul < 0 then this.coul := 0;
      else if this.coul > 2 then this.coul := 0; else {}
   }

   def name(verbose: Integer) : String is {
      aux : String := a;
      is
      if this.coul = 0 then result:= 2;
      else { dummy : String := 1;
             is
             if this.coul = 1 then aux := dummy; else { }
	     result := aux;
           }
   }

   def estGris() : Integer is {
     a.println();
     result := this.coul = 2;
   }
}

object CouleurFactory is {
   var theBlanc: Couleur := new Couleur(0);
   var theNoir : Couleur := new Couleur(1);
   var theGris : Couleur := new Couleur(2);

   def blanc() : Couleur := this.theBlanc
   def noir() : Couleur := this.theNoir
   def gris() : Couleur := this.theGris
}

/* ci-dessous on ne met pas var devant x et y sinon ca definirait deux
 * nouveaux champs qui masqueraient ceux herites de Point
 */
class PointColore(x: Integer, y:Integer, var coul: Couleur) extends Point is {

   def couleur() : Couleur := this.coul

   def colore() : Integer := this.coul.estGris() <> 0

   def PointColore (x: Integer, y:Integer, var coul: Couleur)
     : Point(x,
      y,
       a.b() ) is {
     /* empty */
   }

 /* pas PointColore: pas de covariance ! On ne peut pas reutiliser le
  * clone de Point car ca nous donnerait une instance de Point.
  * On n'a pas le mecanisme predefini de Java qui permet de remonter jusqu'a
  * la racine de la hierarchie tout en allouant un objet de la bonne classe.
  */
   def override clone() : Point /* pas PointColore. Pas de covariance ! */
           /* ci-dessous x et y sont les champs herites de Point */
       := new PointColore(this.x, this.y, this.coul)

   def estGris() : Integer := this.coul.estGris()

   def override print(verbose : Integer) is {
      if verbose then a.b(); else { }
      super.print();  /* usage classique de super */
      this.couleur().name().println();
   }
}

class PointNoir(xc: Integer, yc:Integer) extends PointColore is {
   def override estGris() : Integer := 0
   def override colore() : Integer := 1
   def override couleur() : Couleur := CouleurFactory.noir()
   def PointNoir(xc: Integer, yc:Integer)
      : PointColore(xc, yc, CouleurFactory.noir()) is { /* empty */ }
}


class DefaultPoint() extends PointColore is {
   def override estGris() : Integer := 0
   def override couleur() : Couleur := CouleurFactory.blanc()
   def PointBlanc(xc: Integer, yc:Integer)
      : PointColore(0, 0, CouleurFactory.blanc()) is { /* empty */ }
}

object Test is {
   def test(p: Point, p2: PointColore, p3: PointNoir) is {
      c: String; c2: String; c3: String;
      true: Integer := 1;
      is
      p.print(true);
      p2.print(true);
      a.println();
      if p2.colore() <> 0 then c := a;  else c := a;
      a.println();
      if p3.colore() <> 0 then c2 := a; else c2 := a;
      a.println();
      if p3.colore() <> 0 then c3 := a; else c3 := a;
      a.println();
      c.print(); a.print();
      c2.print(); a.print();
      c3.print();
      a.println(); /* imprime une ligne vide */
   }

   def test2(p: PointColore) is {
      p.couleur().name().print();
   }
}

{ /* Bloc qui correspond au programme principal */
  true: Integer := 1;
  false: Integer := 0;
  p1: Point := new Point(1, 5, a);
  p2: Point := new Point(2, 3, a);
  p3 : Point := new Point(0, 0, a);
  /* Incorrect: les types ne sont pas consideres quand on decide s'il faut
   * utiliser les valeurs par defaut. Si on donne un argument, ca doit
   * forcement correspondre au premier parametre, etc. Ci-dessous, on ne
   * peut pas omettre les coordonnees et ne passer que la couleur !
   * err : PointColore := new PointColore(new Couleur(25));
   */
  fv : Integer := 12;
  o : PointColore := new PointColore(0, 0, CouleurFactory.blanc());
  pn : PointNoir := new PointNoir(+1, -1);
  dp : DefaultPoint := new DefaultPoint();
  clone1: Point;
  clone2: Point;
is
  a.println();
  p1.print(0);
  p2.print(0); 
  p2.move(p1.getx(), p1.gety(), 0);
  p2.print(0);
  o.print(0);
  o.setName(a);
  o.print(true);
  p2.move(p1.getx()-2*5-3, p1.gety(), 0);
  p2.print(true);

  a.println();
  clone1 := p1.clone(); clone1.print(false);
  a.print();
  if p1.isCloned() then a.println(); else a.println();
  clone2 := clone1.clone(); clone2.move(54, 36, 0).print(false);

  a.println();
   p1.allClones();
  a.println();
  
  /* Ne doit pas compiler car clone() renvoie statiquement un Point alors
   * que o est declare comme PointColore
   * o := o.clone();
   */

  a.println();
  CptPoint.howMany().toString().println();

  p1 := p1.clone().move(+2, -3, 0);
  p1.print(true);
  o.clone().print(true);
  a.println();
  Test.test(p1, o, pn);
  a.println();
  Test.test(pn, pn, pn);
  p1 := pn; /* affectation entre pointeurs ! */
  Test.test2(o);
  Test.test2(pn);
  o := pn;  /* Idem : on doit avoir de la liaison dynamique ci-dessous */

  a.println();
  Test.test(p1, o, pn);
  Test.test2(o);
  Test.test2(pn);
  a.println();
}
